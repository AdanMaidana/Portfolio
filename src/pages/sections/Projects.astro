---
import { projectsData } from "../../data/projects";
import ProjectItem from "../../components/ProjectItem.astro";
---

<section
  id="projects"
  class="text-white max-w-screen-lg mx-auto scroll-mt-[5rem] px-4 pt-20"
>
  <header class="mb-10 flex justify-center items-end gap-x-3">
    <h2
      class="text-4xl font-bold text-center text-emerald-400 flex justify-center items-end italic opacity-0"
    >
      Proyectos
    </h2>
    <svg
      class="opacity-0"
      width="36px"
      height="36px"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
      fill="#c2ffe2"
      data-astro-cid-h4owfnww=""
      ><g id="SVGRepo_bgCarrier" stroke-width="0" data-astro-cid-h4owfnww=""
      ></g><g
        id="SVGRepo_tracerCarrier"
        stroke-linecap="round"
        stroke-linejoin="round"
        data-astro-cid-h4owfnww=""></g><g
        id="SVGRepo_iconCarrier"
        data-astro-cid-h4owfnww=""
        ><path
          d="M17 5V3H7v2H1v16h22V5zM8 4h8v1H8zm14 16H2V10h20zm0-11H2V6h20z"
          data-astro-cid-h4owfnww=""></path><path
          fill="none"
          d="M0 0h24v24H0z"
          data-astro-cid-h4owfnww=""></path></g
      ></svg
    >
  </header>

  <main id="projects-main" class="flex flex-col gap-20">
    {
      projectsData.map((project) => {
        return <ProjectItem project={project} />;
      })
    }
  </main>
</section>

<script type="text/javascript">
  const allProjects = document.querySelectorAll(".project");

  //función a ejecutar cuando el proyecto entre en el viewport
  const showProjects = (entradas, observador) => {
    entradas.forEach((entrada) => {
      if (entrada.isIntersecting) {

        if (entrada.target.dataset.index % 2 === 0) {
          // Si el índice es par
          entrada.target.classList.add("visible-left");
        } else {
          // Si el índice es impar
          entrada.target.classList.add("visible-right");
        }
      }
    });
  };

  /* primer valor: funcion a ejecutar cuando el proyecto entre en el viewport */
  /* segundo valor: objeto de configuraciones */
  const projectsObserver = new IntersectionObserver(showProjects, {
    //contenedor donde se observan los cambios del elemento objetivo, (root: null) = todo el viewport se observara
    root: null,
    rootMargin: "0px 0px 0px 0px",
    threshold: 0.6,
  });

  allProjects.forEach((project, index) => {
    project.dataset.index = index; // Asigna el índice como un atributo de datos
    projectsObserver.observe(project);
  });

  //Animación header
  const projectHeader = document.querySelector("#projects header");

  const showProjectHeader = (entradas, observador) => {
    entradas.forEach((entrada) => {

      if (entrada.isIntersecting) {
        const h2 = entrada.target.children[0];
        const svg = entrada.target.children[1];

        h2.classList.add("fadeLeft");
        svg.classList.add("fadeRight");
      }
    });
  };

  const projectHeaderObserver = new IntersectionObserver(showProjectHeader, {
    root: null,
    threshold: 1,
  });

  projectHeaderObserver.observe(projectHeader);
</script>

<style>
  header svg {
    filter: drop-shadow(0 0 10px rgb(0, 255, 157))
      drop-shadow(0 0 10px rgb(0, 255, 157));
  }
  h2 {
    text-shadow: 0 0 20px rgb(0, 255, 157);
    -webkit-text-stroke: 1px white;
    letter-spacing: 2px;
  }

  .fadeLeft {
    animation-name: fadeInLeft;
    animation-duration: 1.5s;
    animation-fill-mode: both;
  }
  .fadeRight {
    animation-name: fadeInRightSvg;
    animation-duration: 1.5s;
    animation-fill-mode: both;
  }
</style>
